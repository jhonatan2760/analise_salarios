names()
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
indentical()
identical()
identical(x)
identical(vect2)
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(seq(1:20))
my_vector <- seq(1:20)
my_vector <- c(1:20)
swirl()
Swirl()
library(swirl)
swil()
select_language(language = 'portuguese')
install_course_github('elthonf', 'Aprendendo_R_no_R')
swirl()
my_vector <- c(1:20)
my_vector <- c([1:20])
my_vector <- c(seq(1:20))
skip()
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
matrix():
?
:
matrix()?
:
matrix
skip()
skip()
install.packages("swirl")
library(swirl)
select_language(language = 'portuguese')
install_course_github('elthonf', 'Aprenda_R_no_R')
swirl()
data.frame(cars)
data(cars)
?cars
head(data.frame)
skip()
plot(data.frame)
plot(data.cars)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
knitr::opts_chunk$set(echo = TRUE)
install.packages("plotly")
library(plotly)
options("scipen" = 2)
Vinhos <- read.csv2("BaseWine_Red_e_White2018.csv", row.names=1)
knitr::opts_chunk$set(echo = TRUE)
install.packages("plotly")
library(plotly)
options("scipen" = 2)
Vinhos <- read.csv2("BaseWine_Red_e_White2018.csv", row.names=1)
install.packages("plotly")
unlink('C:/Users/RM332108/Downloads/Analise_vinhos_v3001 (1)_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
options("scipen" = 2)
Vinhos <- read.csv2("BaseWine_Red_e_White2018.csv", row.names=1)
#View(Vinhos)
str(Vinhos)
summary(Vinhos)
attach(Vinhos)
attr(Vinhos$fixedacidity, 'label') <- 'acidez fixa'
attr(Vinhos$volatileacidity, 'label') <- 'acidez volatil'
attr(Vinhos$citricacid, 'label') <- 'acido citrico'
attr(Vinhos$residualsugar, 'label') <- 'acucar residual'
attr(Vinhos$chlorides, 'label') <- 'cloretos'
attr(Vinhos$freesulfurdioxide, 'label') <- 'dioxido de enxofre livre'
attr(Vinhos$totalsulfurdioxide, 'label') <- 'dioxido de enxofre total'
attr(Vinhos$density, 'label') <- 'densidade'
attr(Vinhos$pH, 'label') <- 'pH'
attr(Vinhos$sulphates, 'label') <- 'sulfatos'
attr(Vinhos$alcohol, 'label') <- 'alcool'
attr(Vinhos$quality, 'label') <- 'qualidade'
attr(Vinhos$Vinho, 'label') <- 'vinho'
sapply(Vinhos, function(x)all(is.na(x)))
table(as.factor(Vinhos$quality), Vinhos$Vinho)
prop.table(table(as.factor(Vinhos$quality), Vinhos$Vinho),2)
attach(Vinhos)
aggregate(Vinhos,
by = list(Vinho),
FUN = mean)
par (mfrow=c(3,4))
hist(fixedacidity)
hist(volatileacidity)
hist(citricacid )
hist(residualsugar)
hist(chlorides)
hist(freesulfurdioxide)
hist(totalsulfurdioxide)
hist(density)
hist(pH)
hist(sulphates)
hist(alcohol)
hist(quality)
par (mfrow=c(1,1))
hist(quality, col=c("pink"), col.main="darkgray", prob=T)
plot_ly(x = Vinhos$volatileacidity, type = 'histogram')
attach(Vinhos)
par (mfrow=c(3,4))
boxplot(fixedacidity, main='fixedacidity')
boxplot(volatileacidity , main='volatileacidity')
boxplot(citricacid , main='citricacid')
boxplot(residualsugar, main='residualsugar')
boxplot(chlorides, main='chlorides')
boxplot(freesulfurdioxide, main='freesulfurdioxide')
boxplot(totalsulfurdioxide, main='totalsulfurdioxide')
boxplot(density, main='density')
boxplot(pH, main='pH')
boxplot(sulphates, main='sulphates')
boxplot(alcohol, main='alcohol')
boxplot(Vinhos$quality, main='quality')
par (mfrow=c(1,1))
boxplot(quality ~ Vinho, main='quality')
boxplot(fixedacidity ~ Vinho, main='fixedacidity',col=c('red','blue'))
boxplot(volatileacidity ~ Vinho , main='volatileacidity',col=c('red','blue'))
boxplot(citricacid ~ Vinho, main='citricacid',col=c('red','blue'))
boxplot(residualsugar ~ Vinho, main='residualsugar',col=c('red','blue'))
boxplot(chlorides ~ Vinho, main='chlorides',col=c('red','blue'))
boxplot(freesulfurdioxide ~ Vinho, main='freesulfurdioxide' ,col=c('red','blue'))
boxplot(totalsulfurdioxide ~ Vinho, main='totalsulfurdioxide',col=c('red','blue'))
boxplot(density ~ Vinho, main='density',col=c('red','blue'))
boxplot(pH ~ Vinho, main='pH',col=c('red','blue'))
boxplot(sulphates ~ Vinho, main='sulphates',col=c('red','blue'))
boxplot(alcohol ~ Vinho, main='alcohol',col=c('red','blue'))
par (mfrow=c(1,1))
white <- subset(Vinhos, Vinho=="WHITE", select=c(quality,fixedacidity,volatileacidity,citricacid,residualsugar,
chlorides,freesulfurdioxide,totalsulfurdioxide,density,pH,
sulphates,alcohol))
red<- subset(Vinhos, Vinho=="RED", select=c(quality,fixedacidity,volatileacidity,citricacid,residualsugar,
chlorides,freesulfurdioxide,totalsulfurdioxide,density,pH,
sulphates,alcohol))
comparing_hist <- plot_ly(alpha = 0.6) %>%
add_histogram(x = ~red$volatileacidity, type = 'histogram', name='Vinho Tinto' ) %>%
add_histogram(x = ~white$volatileacidity, name='Vinho Branco') %>%
layout(barmode = 'overlay')
comparing_hist
attach(Vinhos)
plot(freesulfurdioxide~totalsulfurdioxide)
plot(freesulfurdioxide~totalsulfurdioxide, pch=1, lwd=3)
plot(freesulfurdioxide~totalsulfurdioxide)
abline(v=mean(freesulfurdioxide), col="red")
abline(h=mean(totalsulfurdioxide), col="green")
white <- subset(Vinhos, Vinho=="WHITE", select=c(quality,fixedacidity,volatileacidity,citricacid,residualsugar,
chlorides,freesulfurdioxide,totalsulfurdioxide,density,pH,
sulphates,alcohol))
hist(white$quality)
summary(white)
matcor <- cor(white)
print(matcor, digits = 2)
install.packages("corrgram", repos = "http://cran.us.r-project.org")
install.packages("kernlab", repos = "http://cran.us.r-project.org")
library(corrgram)
corrgram(matcor, type = "cor", lower.panel = panel.shade, upper.panel = panel.pie)
panel.cor <- function(x, y, digits=2, prefix ="", cex.cor,
...)  {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- cor(x, y , use = "pairwise.complete.obs")
txt <- format(c(r, 0.123456789), digits = digits) [1]
txt <- paste(prefix, txt, sep = "")
if (missing(cex.cor))
cex <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * abs(r))
}
pairs(white, lower.panel=panel.smooth, upper.panel=panel.cor)
#Separando os dados em teste e treino
set.seed(1234)
ind <- sample(2, nrow(white),
replace = TRUE,
prob = c(0.8, 0.2))
train_white <- white[ind == 1,]
test_white <- white[ind == 2,]
set.seed(1234)
ind <- sample(2, nrow(red),
replace = TRUE,
prob = c(0.8, 0.2))
train_red <- red[ind == 1,]
test_red <- red[ind == 2,]
# Regressão Linear
white$quality <- as.factor(white$quality)
white.model <- lm(quality ~ ., data = train_white)
summary(white.model)
anova(white.model)
red$quality <- as.factor(red$quality)
red.model <- lm(quality ~ ., data = train_red)
summary(red.model)
anova(red.model)
# predição
predict_white <- predict(white.model, data.frame(quality == 8), interval = 'confidence')
predict_white
#Decision tree with party
install.packages("party",repos = "http://cran.us.r-project.org")
install.packages("rpart",repos = "http://cran.us.r-project.org")
install.packages("rpart.plot",repos = "http://cran.us.r-project.org")
library(party)
library(rpart)
library(rpart.plot)
mytree <- ctree(quality~., white, controls=ctree_control(mincriterion=0.9, minsplit=50))
print(mytree)
plot(mytree,type="simple")
#Misclassification error
tab<-table(predict(mytree), white$quality)
print(tab)
1-sum(diag(tab))/sum(tab)
set.seed(1234)
tree<-rpart(train_white$quality~., data=train_white)
prp(tree, type=3, tweak=0.8, main="white wine quality", compress=TRUE)
set.seed(1234)
tree2<-rpart(train_red$quality~., data=train_red)
prp(tree2, type=3, tweak=0.8, main="red wine quality", compress=TRUE)
#Misclassification error
train_white$quality <- as.factor(train_white$quality)
tab<-table(predict(tree), train_white$quality)
print(tab)
1-sum(diag(tab))/sum(tab)
train_red$quality <- as.factor(train_red$quality)
tab2<-table(predict(tree2), train_red$quality)
print(tab2)
1-sum(diag(tab2))/sum(tab2)
install.packages("caret",repos = "http://cran.us.r-project.org")
install.packages("corrplot",repos = "http://cran.us.r-project.org")
install.packages("kknn",repos = "http://cran.us.r-project.org")
install.packages("randomForest",repos = "http://cran.us.r-project.org")
install.packages("kernlab",repos = "http://cran.us.r-project.org")
set.seed(10)
library(caret)
library(corrplot)
library(kknn)
library(randomForest)
library(kernlab)
white$quality <- as.factor(white$quality)
inTrain <- createDataPartition(white$quality, p = 2/3, list = F)
train.white <- white[inTrain,]
test.white <- white[-inTrain,]
t.ctrl <- trainControl(method = "repeatedcv", number = 5, repeats = 5)
rf.grid <- expand.grid(mtry = 1:11)
rf.train <- train(quality ~ ., data = train.white, method = "rf",
trControl = t.ctrl, tuneGrid = rf.grid,
preProcess = c("center", "scale"))
install.packages("kernlab", repos = "http://cran.us.r-project.org")
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
options("scipen" = 2)
Vinhos <- read.csv2("BaseWine_Red_e_White2018.csv", row.names=1)
#Decision tree with party
install.packages("party",repos = "http://cran.us.r-project.org")
plot(salarios)
salarios <- read.table(file = "salarios", header = TRUE)
#Importando lib de leitura para o sistema
install.packages("readxl")
library("readxl")
salarios <- read_excell("salarios.xlsx")
#Importando lib de leitura para o sistema
install.packages("readxl")
library("readxl")
salarios <- read_excell("salarios.xlsx")
install.packages("readxl")
#Importando lib de leitura para o sistema
install.packages("readxl")
library("readxl")
salarios <- read_excell("salarios.xlsx")
#Importando lib de leitura para o sistema
install.packages("readxl")
library("readxl")
salarios <- read_excell("salarios.xlsx")
install.packages("readxl")
#Importando lib de leitura para o sistema
install.packages("readxl")
library("readxl")
salarios <- read_excel("salarios.xlsx")
plot(salarios)
#Importando lib de leitura para o sistema
install.packages("readxl")
library("readxl")
salarios <- read_excel("salarios.xlsx")
summary(salarios)
View(salarios)
View(salarios)
#View(salarios)
str(salarios)
#Importando lib de leitura para o sistema
install.packages("readxl")
#Importando a lib para plotar graficos
install.packages("matplolib")
#Importando lib de leitura para o sistema
install.packages("readxl")
#Importando a lib para plotar graficos
install.packages("matplolib")
library("readxl")
library("matplotlib")
hist(salarios$salario)
hist(salarios$salario)
hist(salarios$tempoempresa)
hist(salarios$salario)
hist(salarios$tempoempresa)
hist(salarios$idade)
hist(salarios$escolaridade)
hist(salario$experiencia)
hist(salarios$salario)
hist(salarios$tempoempresa)
hist(salarios$idade)
hist(salarios$escolaridade)
hist(salario$experiencia)
hist(salarios$salario)
hist(salarios$tempoempresa)
hist(salarios$idade)
hist(salarios$escolaridade)
hist(salarios$experiencia)
boxplot(salarios$salario)
boxplot(salarios$salario)
boxplot(salarios$idade)
boxplot(salarios$escolaridade)
boxplot(salarios$tempoempresa)
boxplot(salarios$salario)
boxplot(salarios$idade)
boxplot(salarios$escolaridade)
boxplot(salarios$tempoempresa)
boxplot(salarios$salario)
boxplot(salarios$idade)
boxplot(salarios$escolaridade)
boxplot(salarios$tempoempresa)
sd(salarios)
boxplot(salarios$salario)
boxplot(salarios$idade)
boxplot(salarios$escolaridade)
boxplot(salarios$tempoempresa)
sd(salarios$salario)
plot_ly(x = salarios$salario, type = 'histogram')
#Importando lib de leitura para o sistema
install.packages("readxl")
install.packages("plotly")
library("readxl")
install.packages("readxl")
#Importando lib de leitura para o sistema
install.packages("readxl")
#Importando lib de leitura para o sistema
install.packages("readxl")
install.packages("plotly")
library("readxl")
library("plotly")
install.packages("plotly")
plot_ly(x = salarios$salario, type = 'histogram')
#Importando lib de leitura para o sistema
#install.packages("readxl")
install.packages("plotly")
library("readxl")
library(plotly)
plot_ly(x = salarios$salario, type = 'histogram')
plot_ly(x = salarios$salario, y = salarios$escolaridade, type = 'histogram')
plot_ly(x = salarios$escolaridade, y = salarios$salario, type = 'histogram')
plot_ly(x = salarios$salario, type = 'histogram')
boxplot(salarios$salario ~ salarios$experiencia, main='Salario por experiência')
salarios <- salarios[salarios$experiencia/12]
salarios <- salarios[salarios$tempoempresa/12]
salarios <- salarios[as.numeric(salarios$tempoempresa/12)]
salarios$tempoempresa <-  salarios$tempoempresa / 12
salarios$tempoempresa <-  salarios$tempoempresa / 12
print(salarios$tempoempresa)
#Atribuindo valores para a varáivel que iremos utilizar
salarios <- read_excel("salarios.xlsx")
summary(salarios)
salarios$tempoempresa <-  as.integer(salarios$tempoempresa / 12)
boxplot(salarios$salario ~ salarios$experiencia, main='Salario por experiência')
boxplot(salarios$salario ~ salarios$tempoempresa, main='Salario por experiência')
boxplot(salarios$salario ~ salarios$tempoempresa, main='Salario por Tempo de Empresa')
salarios$tempoempresa <-  as.integer(salarios$tempoempresa / 12)
salarios$experiencia <- as.integer(salarios$experiencia)
#Importando lib de leitura para o sistema
#install.packages("readxl")
#install.packages("plotly")
library("readxl")
library(plotly)
salarios$tempoempresa <-  as.integer(salarios$tempoempresa / 12)
salarios$experiencia <- as.integer(salarios$experiencia)
#Atribuindo valores para a varáivel que iremos utilizar
salarios <- read_excel("salarios.xlsx")
summary(salarios)
salarios$tempoempresa <-  as.integer(salarios$tempoempresa / 12)
salarios$experiencia <- as.integer(salarios$experiencia)
hist(salarios$salario)
hist(salarios$tempoempresa)
hist(salarios$idade)
hist(salarios$escolaridade)
hist(salarios$experiencia)
boxplot(salarios$salario ~ salarios$tempoempresa, main='Salario por Tempo de Empresa')
boxplot(salarios$salario ~ salarios$experiencia, main = 'Salario por tempo de experiência')
boxplot(salarios$salario ~ salarios$experiencia, main = 'Salario por tempo de experiência')
boxplot(salarios$salario ~ salarios$idade, main = 'Salario por idade')
boxplot(salarios$salario ~ salarios$salario, main = 'Salario por idade')
boxplot(salarios$salario ~ salarios$idade, main = 'Salario por idade')
attach(salarios$salario)
attach(salarios)
boxplot(salarios$salario ~ salarios$idade, main = 'Salario por idade')
#Importando lib de leitura para o sistema
#install.packages("readxl")
#install.packages("plotly")
install.packages("corrgram")
library("readxl")
library(plotly)
corrgram(salarios, type="cor", lower.panel = panel.shade, upper.panel = pannel.pie)
#Importando lib de leitura para o sistema
#install.packages("readxl")
#install.packages("plotly")
#install.packages("corrgram")
library("readxl")
library(plotly)
library(corrgram)
#Importando lib de leitura para o sistema
#install.packages("readxl")
#install.packages("plotly")
#install.packages("corrgram")
library("readxl")
library(plotly)
library('corrgram')
#Importando lib de leitura para o sistema
#install.packages("readxl")
#install.packages("plotly")
install.packages("corrgram")
library("readxl")
library(plotly)
#library(corrgram)
#Importando lib de leitura para o sistema
#install.packages("readxl")
#install.packages("plotly")
#install.packages("corrgram")
library("readxl")
library(plotly)
library(corrgram)
#Importando lib de leitura para o sistema
#install.packages("readxl")
#install.packages("plotly")
#install.packages("corrgram")
install.packages("kernlab", type="source")
library("readxl")
library(plotly)
library(corrgram)
#Importando lib de leitura para o sistema
#install.packages("readxl")
#install.packages("plotly")
install.packages("corrgram")
#install.packages("kernlab", type="source")
library("readxl")
library(plotly)
library(corrgram)
#Importando lib de leitura para o sistema
#install.packages("readxl")
#install.packages("plotly")
install.packages(corrgram)
#install.packages("kernlab", type="source")
library("readxl")
library(plotly)
library(corrgram)
